import json

# Diccionario global para almacenar los usuarios
users = {}

# Función para guardar los datos en un archivo JSON
def saveData():
    try:
        with open('users_data.json', 'w') as file:
            json.dump(users, file)
    except Exception as e:
        print(f"Error guardando los datos: {e}")

# Función para cargar los datos desde un archivo JSON
def loadData():
    global users
    try:
        with open('users_data.json', 'r') as file:
            users = json.load(file)
    except FileNotFoundError:
        print("El archivo no existe. Creando nuevo archivo.")
        users = {}
    except json.JSONDecodeError:
        print("Error: archivo JSON corrupto o vacío.")
        users = {}

# Función para registrar un usuario con nombre y contraseña
def registerUser(name, password):
    if name in users:
        return "User already exists"
    users[name] = {'password': password, 'score': 0, 'logged_in': False}
    saveData()
    return "User registered successfully"

# Función que abre o cierra una sesión
def openCloseSession(name, password, flag):
    if name in users and users[name]['password'] == password:
        if flag == "open" and not users[name]['logged_in']:
            users[name]['logged_in'] = True
            saveData()
            return "Session was successfully opened"
        elif flag == "close" and users[name]['logged_in']:
            users[name]['logged_in'] = False
            saveData()
            return "Session was successfully closed"
        else:
            return "error"
    return "error"

# Función que actualiza el puntaje
def updateScore(name, password, score):
    if name in users and users[name]['password'] == password and users[name]['logged_in']:
        users[name]['score'] = score
        saveData()
        return "Score was successfully updated"
    return "error"

# Función que retorna el puntaje del usuario
def getScore(name, password):
    if name in users and users[name]['password'] == password and users[name]['logged_in']:
        return users[name]['score']
    return "error"

# Función que retorna la lista de usuarios conectados
def usersList(name, password):
    if name in users and users[name]['password'] == password and users[name]['logged_in']:
        connected_users = [(user, users[user]['score']) for user in users if users[user]['logged_in']]
        return connected_users
    return "error"

# Función que genera una pregunta en una categoría
def question(name, password, cat):
    if name in users and users[name]['password'] == password and users[name]['logged_in']:
        questions = {
            "math": "What is 2 + 2?",
            "science": "What planet is closest to the sun?",
            "history": "Who was the first president of the USA?"
        }
        return questions.get(cat, "Category not found")
    return "error"

# Función interactiva para probar el sistema
def menu():
    while True:
        print("\nMENU:")
        print("1. Registrar Usuario")
        print("2. Iniciar/Cerrar Sesión")
        print("3. Actualizar Puntaje")
        print("4. Ver Puntaje")
        print("5. Ver Usuarios Conectados")
        print("6. Hacer Pregunta")
        print("7. Salir")
        
        choice = input("\nSelecciona una opción: ")
        
        if choice == "1":
            name = input("Ingresa el nombre de usuario: ")
            password = input("Ingresa la contraseña: ")
            print(registerUser(name, password))
        
        elif choice == "2":
            name = input("Ingresa el nombre de usuario: ")
            password = input("Ingresa la contraseña: ")
            action = input("¿Abrir o cerrar sesión? (open/close): ")
            print(openCloseSession(name, password, action))
        
        elif choice == "3":
            name = input("Ingresa el nombre de usuario: ")
            password = input("Ingresa la contraseña: ")
            score = int(input("Ingresa el nuevo puntaje: "))
            print(updateScore(name, password, score))
        
        elif choice == "4":
            name = input("Ingresa el nombre de usuario: ")
            password = input("Ingresa la contraseña: ")
            print("Puntaje: ", getScore(name, password))
        
        elif choice == "5":
            name = input("Ingresa el nombre de usuario: ")
            password = input("Ingresa la contraseña: ")
            print("Usuarios conectados: ", usersList(name, password))
        
        elif choice == "6":
            name = input("Ingresa el nombre de usuario: ")
            password = input("Ingresa la contraseña: ")
            cat = input("Categoría (math/science/history): ")
            print("Pregunta: ", question(name, password, cat))
        
        elif choice == "7":
            print("Saliendo...")
            break
        
        else:
            print("Opción no válida. Inténtalo de nuevo.")

# Cargar los datos al iniciar el programa
loadData()

# Ejecutar el menú interactivo
menu()
